[
  {
    "id": 1,
    "title": "One Year to an Organized Life",
    "content": "Registers the given template engine callback as ext.\n\nBy default, Express will require() the engine based on the file extension. For example, if you try to render a “foo.pug” file, Express invokes the following internally, and caches the require() on subsequent calls to increase performance.\n\napp.engine('pug', require('pug').__express)\nUse this method for engines that do not provide .__express out of the box, or if you wish to “map” a different extension to the template engine.\n\nFor example, to map the EJS template engine to “.html” files:\n\napp.engine('html', require('ejs').renderFile)\nIn this case, EJS provides a .renderFile() method with the same signature that Express expects: (path, options, callback), though note that it aliases this method as ejs.__express internally so if you’re using “.ejs” extensions you don’t need to do anything.\n\nSome template engines do not follow this convention. The consolidate.js library maps Node template engines to follow this convention, so they work seamlessly with Express.\n\nvar engines = require('consolidate')\napp.engine('haml', engines.haml)\napp.engine('html', engines.hogan)",
    "author": "express",
    "publishedAt": "12"
  },
  {
    "id": 3,
    "title": "New article",
    "content": "This is a built-in middleware function in Express. It parses incoming requests with JSON payloads and is based on body-parser.\n\nReturns middleware that only parses JSON and only looks at requests where the Content-Type header matches the type option. This parser accepts any Unicode encoding of the body and supports automatic inflation of gzip and deflate encodings.\n\nA new body object containing the parsed data is populated on the request object after the middleware (i.e. req.body), or an empty object ({}) if there was no body to parse, the Content-Type was not matched, or an error occurred.\n\nAs req.body’s shape is based on user-controlled input, all properties and values in this object are untrusted and should be validated before trusting. For example, req.body.foo.toString() may fail in multiple ways, for example foo may not be there or may not be a string, and toString may not be a function and instead a string or other user-input.\n\nThe following table describes the properties of the optional options object.",
    "author": "nadktk",
    "publishedAt": "19"
  }
]