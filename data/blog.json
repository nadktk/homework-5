[
  {
    "id": 1,
    "title": "New article",
    "content": "This is a built-in middleware function in Express. It parses incoming requests with JSON payloads and is based on body-parser.\n\nReturns middleware that only parses JSON and only looks at requests where the Content-Type header matches the type option. This parser accepts any Unicode encoding of the body and supports automatic inflation of gzip and deflate encodings.\n\nA new body object containing the parsed data is populated on the request object after the middleware (i.e. req.body), or an empty object ({}) if there was no body to parse, the Content-Type was not matched, or an error occurred.\n\nAs req.bodyâ€™s shape is based on user-controlled input, all properties and values in this object are untrusted and should be validated before trusting. For example, req.body.foo.toString() may fail in multiple ways, for example foo may not be there or may not be a string, and toString may not be a function and instead a string or other user-input.\n\nThe following table describes the properties of the optional options object.",
    "author": "nadktk",
    "publishedAt": "19 may"
  },
  {
    "id": 2,
    "title": "Alice in Wonderland",
    "content": "In environments outside of CommonJS or ECMAScript modules, you may use var to create a global variable that may be used by other scripts. You can use the /* exported variableName */ comment block to indicate that this variable is being exported and therefore should not be considered unused.\n\nNote that /* exported */ has no effect for any of the following:\n\nwhen the environment is node or commonjs\nwhen parserOptions.sourceType is module\nwhen ecmaFeatures.globalReturn is true\nThe line comment // exported variableName will not work as exported is not line-specific.\n\nExamples of correct code for /* exported variableName */ operation:",
    "author": "eslint",
    "publishedAt": "12 october"
  }
]
